{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "RegistryQueryMsg_for_InnerQueries_and_CosmosAuthData_for_String_and_CosmosAccountQuery_for_Nullable_Empty_and_Nullable_Empty",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "account_info"
      ],
      "properties": {
        "account_info": {
          "type": "object",
          "required": [
            "query"
          ],
          "properties": {
            "query": {
              "$ref": "#/definitions/CosmosAccountQuery_for_Nullable_Empty"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "encryption_key"
      ],
      "properties": {
        "encryption_key": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "allowed_code_ids"
      ],
      "properties": {
        "allowed_code_ids": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "with_auth_data"
      ],
      "properties": {
        "with_auth_data": {
          "type": "object",
          "required": [
            "auth_data",
            "query"
          ],
          "properties": {
            "auth_data": {
              "$ref": "#/definitions/CosmosAuthData_for_String"
            },
            "query": {
              "$ref": "#/definitions/InnerQueries"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "with_key"
      ],
      "properties": {
        "with_key": {
          "type": "object",
          "required": [
            "key",
            "query"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "query": {
              "$ref": "#/definitions/InnerQueries"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "with_permit"
      ],
      "properties": {
        "with_permit": {
          "type": "object",
          "required": [
            "permit",
            "query"
          ],
          "properties": {
            "hrp": {
              "type": [
                "string",
                "null"
              ]
            },
            "permit": {
              "$ref": "#/definitions/Permit_for_TokenPermissions"
            },
            "query": {
              "$ref": "#/definitions/InnerQueries"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "encrypted"
      ],
      "properties": {
        "encrypted": {
          "type": "object",
          "required": [
            "nonce",
            "public_key",
            "query"
          ],
          "properties": {
            "nonce": {
              "$ref": "#/definitions/Binary"
            },
            "public_key": {
              "$ref": "#/definitions/Binary"
            },
            "query": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "extension"
      ],
      "properties": {
        "extension": {
          "type": "object",
          "properties": {
            "query": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Empty"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "CosmosAccountQuery_for_Nullable_Empty": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "account_id"
          ],
          "properties": {
            "account_id": {
              "$ref": "#/definitions/Uint64"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "credential_id"
          ],
          "properties": {
            "credential_id": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Empty"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CosmosAuthData_for_String": {
      "type": "object",
      "required": [
        "credentials"
      ],
      "properties": {
        "credentials": {
          "description": "Public key corresponding to the user's secret key used for signing.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CosmosCredential_for_String"
          }
        },
        "primary_index": {
          "description": "Index of the primary credential in the list",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "CosmosCredential_for_String": {
      "type": "object",
      "required": [
        "message",
        "pubkey",
        "signature"
      ],
      "properties": {
        "hrp": {
          "description": "prefix for the bech32 address on remote cosmos chain",
          "type": [
            "string",
            "null"
          ]
        },
        "message": {
          "description": "signed inner message before being wrapped with 036",
          "type": "string"
        },
        "pubkey": {
          "description": "public key matching the secret key used to sign transactions",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "signature": {
          "description": "signed sha256 digest of a message wrapped in arbitary data (036) object",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Empty": {
      "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
      "type": "object"
    },
    "InnerQueries": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "test_text"
          ],
          "properties": {
            "test_text": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "test"
          ],
          "properties": {
            "test": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PermitParams_for_TokenPermissions": {
      "type": "object",
      "required": [
        "allowed_tokens",
        "chain_id",
        "permissions",
        "permit_name"
      ],
      "properties": {
        "allowed_tokens": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "chain_id": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenPermissions"
          }
        },
        "permit_name": {
          "type": "string"
        }
      }
    },
    "PermitSignature": {
      "type": "object",
      "required": [
        "pub_key",
        "signature"
      ],
      "properties": {
        "pub_key": {
          "$ref": "#/definitions/PubKey"
        },
        "signature": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    "Permit_for_TokenPermissions": {
      "type": "object",
      "required": [
        "params",
        "signature"
      ],
      "properties": {
        "params": {
          "$ref": "#/definitions/PermitParams_for_TokenPermissions"
        },
        "signature": {
          "$ref": "#/definitions/PermitSignature"
        }
      }
    },
    "PubKey": {
      "type": "object",
      "required": [
        "type",
        "value"
      ],
      "properties": {
        "type": {
          "description": "ignored, but must be \"tendermint/PubKeySecp256k1\" otherwise the verification will fail",
          "type": "string"
        },
        "value": {
          "description": "Secp256k1 PubKey",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        }
      }
    },
    "TokenPermissions": {
      "oneOf": [
        {
          "description": "Allowance for SNIP-20 - Permission to query allowance of the owner & spender",
          "type": "string",
          "enum": [
            "allowance"
          ]
        },
        {
          "description": "Balance for SNIP-20 - Permission to query balance",
          "type": "string",
          "enum": [
            "balance"
          ]
        },
        {
          "description": "History for SNIP-20 - Permission to query transfer_history & transaction_hisotry",
          "type": "string",
          "enum": [
            "history"
          ]
        },
        {
          "description": "Owner permission indicates that the bearer of this permit should be granted all the access of the creator/signer of the permit.  SNIP-721 uses this to grant viewing access to all data that the permit creator owns and is whitelisted for. For SNIP-721 use, a permit with Owner permission should NEVER be given to anyone else.  If someone wants to share private data, they should whitelist the address they want to share with via a SetWhitelistedApproval tx, and that address will view the data by creating their own permit with Owner permission",
          "type": "string",
          "enum": [
            "owner"
          ]
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use secret_cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}

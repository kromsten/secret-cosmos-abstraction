{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryAnswer",
  "description": "responses to queries",
  "oneOf": [
    {
      "description": "List the offspring where address is associated.",
      "type": "object",
      "required": [
        "list_my_offspring"
      ],
      "properties": {
        "list_my_offspring": {
          "type": "object",
          "properties": {
            "active": {
              "description": "lists of the address' active offspring",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/StoreOffspringInfo"
              }
            },
            "inactive": {
              "description": "lists of the address' inactive offspring",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/StoreOffspringInfo"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "List active offspring",
      "type": "object",
      "required": [
        "list_active_offspring"
      ],
      "properties": {
        "list_active_offspring": {
          "type": "object",
          "required": [
            "active"
          ],
          "properties": {
            "active": {
              "description": "active offspring",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StoreOffspringInfo"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "List inactive offspring in no particular order",
      "type": "object",
      "required": [
        "list_inactive_offspring"
      ],
      "properties": {
        "list_inactive_offspring": {
          "type": "object",
          "required": [
            "inactive"
          ],
          "properties": {
            "inactive": {
              "description": "inactive offspring in no particular order",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StoreOffspringInfo"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Viewing Key Error",
      "type": "object",
      "required": [
        "viewing_key_error"
      ],
      "properties": {
        "viewing_key_error": {
          "type": "object",
          "required": [
            "error"
          ],
          "properties": {
            "error": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "result of authenticating address/key pair",
      "type": "object",
      "required": [
        "is_key_valid"
      ],
      "properties": {
        "is_key_valid": {
          "type": "object",
          "required": [
            "is_valid"
          ],
          "properties": {
            "is_valid": {
              "type": "boolean"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "result of authenticating a permit",
      "type": "object",
      "required": [
        "is_permit_valid"
      ],
      "properties": {
        "is_permit_valid": {
          "type": "object",
          "required": [
            "is_valid"
          ],
          "properties": {
            "address": {
              "description": "address of the permit signer if the permit was valid",
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "is_valid": {
              "type": "boolean"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "ContractInfo": {
      "description": "code hash and address of a contract",
      "type": "object",
      "required": [
        "address",
        "code_hash"
      ],
      "properties": {
        "address": {
          "description": "contract's address",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "code_hash": {
          "description": "contract's code hash string",
          "type": "string"
        }
      }
    },
    "StoreOffspringInfo": {
      "description": "active offspring info for storage/display",
      "type": "object",
      "required": [
        "contract",
        "label"
      ],
      "properties": {
        "contract": {
          "description": "offspring address",
          "allOf": [
            {
              "$ref": "#/definitions/ContractInfo"
            }
          ]
        },
        "label": {
          "description": "label used when initializing offspring",
          "type": "string"
        }
      }
    }
  }
}
